{"version":3,"sources":["scenes/UserData.tsx","App.tsx","reportWebVitals.tsx","index.tsx"],"names":["UserData","props","useState","uibuilder","get","feVersion","socketConnectedState","setSocketConnectedState","serverTimeOffset","setServerTimeOffset","msgRecvd","setMsgRecvd","msgsReceived","setMsgsReceived","msgCtrl","setMsgCtrl","msgsControl","setMsgsControl","msgSent","setMsgSent","msgsSent","setMsgsSent","setMsgCtrlSent","setMsgsCtrlSent","useEffect","debug","start","onChange","newVal","console","info","window","setTimeout","send","clearEventListeners","style","height","className","JSON","stringify","App","title","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.03931aed.chunk.js","sourcesContent":["/* This is where the uibuilder action happens */\nimport React, {useState, useEffect} from 'react';\n//import ReactDOM from 'react-dom';\n//import { findDOMNode } from 'react-dom';\n\n// @ts-ignore TODO proper typing\nimport uibuilder from 'node-red-contrib-uibuilder/front-end/src/uibuilderfe';\n\ninterface IUserDataProps {\n    title?: string\n}\n\nfunction UserData(props: IUserDataProps) {\n\n    // Example of retrieving data from uibuilder\n    const [feVersion, setFeVersion] = useState<string>(uibuilder.get('version'));\n    const [socketConnectedState, setSocketConnectedState] = useState<boolean>(false);\n    const [serverTimeOffset, setServerTimeOffset] = useState<Object>(['unknown']);\n    const [msgRecvd, setMsgRecvd] = useState<Object>(['Nothing']);\n    const [msgsReceived, setMsgsReceived] = useState<number>(0);\n    const [msgCtrl, setMsgCtrl] = useState<Object>(['Nothing']);\n    const [msgsControl, setMsgsControl] = useState<number>(0);\n    const [msgSent, setMsgSent] = useState<Object>(['Nothing']);\n    const [msgsSent, setMsgsSent] = useState<number>(0);\n    const [msgCtrlSent, setMsgCtrlSent] = useState<Object>(['Nothing']);\n    const [msgsCtrlSent, setMsgsCtrlSent] = useState<number>(0);\n\n\n    useEffect(\n        () => {\n            uibuilder.debug(true);\n\n            /** **REQUIRED** Start uibuilder comms with Node-RED @since v2.0.0-dev3\n             * Pass the namespace and ioPath variables if hosting page is not in the instance root folder\n             * e.g. If you get continual `uibuilderfe:ioSetup: SOCKET CONNECT ERROR` error messages.\n             * e.g. uibuilder.start('/nr/uib', '/nr/uibuilder/vendor/socket.io') // change to use your paths/names\n             */\n            uibuilder.start();\n\n\n            /** You can use the following to help trace how messages flow back and forth.\n             * You can then amend this processing to suite your requirements.\n             */\n\n            //#region ---- Trace Received Messages ---- //\n            // If msg changes - msg is updated when a standard msg is received from Node-RED over Socket.IO\n            // newVal relates to the attribute being listened to.\n            uibuilder.onChange('msg', (newVal: Object) => {\n                console.info('[uibuilder.onChange] msg received from Node-RED server:', newVal);\n                setMsgRecvd(newVal);\n            });\n\n            // As we receive new messages, we get an updated count as well\n            uibuilder.onChange('msgsReceived', (newVal: number) => {\n                console.info('[uibuilder.onChange] Updated count of received msgs:', newVal);\n                setMsgsReceived(newVal);\n            });\n\n            // If we receive a control message from Node-RED, we can get the new data here - we pass it to a Vue variable\n            uibuilder.onChange('ctrlMsg', (newVal: Object) => {\n                console.info('[uibuilder.onChange:ctrlMsg] CONTROL msg received from Node-RED server:', newVal);\n                setMsgCtrl(newVal);\n            });\n\n            // Updated count of control messages received\n            uibuilder.onChange('msgsCtrl', (newVal: number) => {\n                console.info('[uibuilder.onChange:msgsCtrl] Updated count of received CONTROL msgs:', newVal);\n                setMsgsControl(newVal);\n            });\n\n            //#endregion ---- End of Trace Received Messages ---- //\n\n            //#region ---- Trace Sent Messages ---- //\n            // You probably only need these to help you understand the order of processing //\n            // If a message is sent back to Node-RED, we can grab a copy here if we want to\n            uibuilder.onChange('sentMsg', (newVal: Object) => {\n                console.info('[uibuilder.onChange:sentMsg] msg sent to Node-RED server:', newVal);\n                setMsgSent(newVal);\n            });\n\n            // Updated count of sent messages\n            uibuilder.onChange('msgsSent', (newVal: number) => {\n                console.info('[uibuilder.onChange:msgsSent] Updated count of msgs sent:', newVal);\n                setMsgsSent(newVal);\n            });\n\n            // If we send a control message to Node-RED, we can get a copy of it here\n            uibuilder.onChange('sentCtrlMsg', (newVal: Object) => {\n                console.info('[uibuilder.onChange:sentCtrlMsg] Control message sent to Node-RED server:', newVal);\n                setMsgCtrlSent(newVal);\n            });\n\n            // And we can get an updated count\n            uibuilder.onChange('msgsSentCtrl', (newVal: number) => {\n                console.info('[uibuilder.onChange:msgsSentCtrl] Updated count of CONTROL msgs sent:', newVal);\n                setMsgsCtrlSent(newVal);\n            });\n\n            //#endregion ---- End of Trace Sent Messages ---- //\n\n            // If Socket.IO connects/disconnects, we get true/false here\n            uibuilder.onChange('ioConnected', (newVal: boolean) => {\n                console.info('[uibuilder.onChange:ioConnected] Socket.IO Connection Status Changed to:', newVal)\n                setSocketConnectedState(newVal);\n            });\n\n            // If Server Time Offset changes\n            uibuilder.onChange('serverTimeOffset', (newVal: Object) => {\n                console.info('[uibuilder.onChange:serverTimeOffset] Offset of time between the browser and the server has changed to:', newVal)\n                setServerTimeOffset(newVal);\n            });\n\n            //Manually send a message back to Node-RED after 2 seconds\n            window.setTimeout(function () {\n                console.info('Sending a message back to Node-RED-after2sdelay')\n                uibuilder.send({'topic': 'uibuilderfe', 'payload': 'I am a message sent from the uibuilder front end'})\n            }, 2000);\n\n\n            return () => {\n                uibuilder.clearEventListeners();\n            };\n\n        },\n        []\n    );\n\n\n    return (\n\n        <div style={{height: \"50vh\"}}>\n            <hr></hr>\n            <div className=\"d1\">\n                <div>Last msg Received:</div>\n                <pre><code>{JSON.stringify(msgRecvd, null, 2)}</code></pre>\n                <div># Msgs Received: {msgsReceived}</div>\n            </div>\n\n            <div className=\"d1\">\n                <div>last Ctl Msg Received:</div>\n                <pre><code>{JSON.stringify(msgCtrl, null, 2)}</code></pre>\n                <div># Control Msgs Received: {msgsControl}</div>\n            </div>\n\n            <div className=\"d1\">\n                <div>last Msg Sent</div>\n                <pre><code>{JSON.stringify(msgSent, null, 2)}</code></pre>\n                <div># msgs Sent: {msgsSent}</div>\n            </div>\n\n            <div className=\"d1\">\n                <div>Socket Connected?: {socketConnectedState}</div>\n                <div>uibuilderfe Version: {feVersion}</div>\n                <div>Server Time Offset from browser: {serverTimeOffset}</div>\n            </div>\n\n        </div>\n    );\n\n}\n\nexport default UserData\n","import React from 'react';\nimport './App.css';\n\n// Import uibuilder enabled component\nimport UserData from './scenes/UserData';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n\n        {/* THIS IS THE UIBUILDER COMPONENT */}\n        <UserData title=\"User Data\"></UserData>\n\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = (onPerfEntry?: any) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}