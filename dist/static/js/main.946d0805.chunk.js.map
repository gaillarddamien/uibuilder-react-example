{"version":3,"sources":["scenes/UserData.js","App.js","reportWebVitals.js","index.js"],"names":["UserData","props","uibuilder","start","state","feVersion","get","socketConnectedState","serverTimeOffset","msgRecvd","msgsReceived","msgCtrl","msgsControl","msgSent","msgsSent","msgCtrlSent","msgsCtrlSent","onChange","newVal","setState","console","info","window","setTimeout","send","ref","style","height","className","JSON","stringify","this","Component","App","title","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.946d0805.chunk.js","sourcesContent":["/* This is where the uibuilder action happens */\nimport React, { Component } from 'react';\n//import ReactDOM from 'react-dom';\n//import { findDOMNode } from 'react-dom';\n\nimport uibuilder from 'node-red-contrib-uibuilder/front-end/src/uibuilderfe'\n\nclass UserData extends Component{\n\tconstructor(props){\n\t\tsuper(props)\n\n        /** **REQUIRED** Start uibuilder comms with Node-RED @since v2.0.0-dev3\n         * Pass the namespace and ioPath variables if hosting page is not in the instance root folder\n         * e.g. If you get continual `uibuilderfe:ioSetup: SOCKET CONNECT ERROR` error messages.\n         * e.g. uibuilder.start('/nr/uib', '/nr/uibuilder/vendor/socket.io') // change to use your paths/names\n         */\n        uibuilder.start();\n\n\t\tthis.state = {\n            // Example of retrieving data from uibuilder\n            feVersion   : uibuilder.get('version'),\n\n            socketConnectedState : false,\n            serverTimeOffset     : '[unknown]',\n\n            msgRecvd    : '[Nothing]',\n            msgsReceived: 0,\n            msgCtrl     : '[Nothing]',\n            msgsControl : 0,\n\n            msgSent     : '[Nothing]',\n            msgsSent    : 0,\n            msgCtrlSent : '[Nothing]',\n            msgsCtrlSent: 0,\n        }\n\n        /** You can use the following to help trace how messages flow back and forth.\n         * You can then amend this processing to suite your requirements.\n         */\n\n        //#region ---- Trace Received Messages ---- //\n        // If msg changes - msg is updated when a standard msg is received from Node-RED over Socket.IO\n        // newVal relates to the attribute being listened to.\n\t\tuibuilder.onChange('msg', (newVal) => {\n\n\t\t\tthis.setState({ 'msgRecvd': newVal });\n\n\t\t\tconsole.info('[uibuilder.onChange] msg received from Node-RED server:', newVal);\n\t\t})\n\n        // As we receive new messages, we get an updated count as well\n\t\tuibuilder.onChange('msgsReceived',(newVal) =>{\n            console.info('[uibuilder.onChange] Updated count of received msgs:', newVal);\n\n\t\t\tthis.setState({ 'msgsReceived': newVal });\n\t\t})\n\n        // If we receive a control message from Node-RED, we can get the new data here - we pass it to a Vue variable\n        uibuilder.onChange('ctrlMsg', (newVal) => {\n            console.info('[uibuilder.onChange:ctrlMsg] CONTROL msg received from Node-RED server:', newVal);\n\n            this.setState({ 'msgCtrl': newVal });\n        })\n        // Updated count of control messages received\n        uibuilder.onChange('msgsCtrl', (newVal) => {\n            console.info('[uibuilder.onChange:msgsCtrl] Updated count of received CONTROL msgs:', newVal);\n\n            this.setState({ 'msgsControl': newVal });\n        })\n        //#endregion ---- End of Trace Received Messages ---- //\n\n        //#region ---- Trace Sent Messages ---- //\n        // You probably only need these to help you understand the order of processing //\n        // If a message is sent back to Node-RED, we can grab a copy here if we want to\n        uibuilder.onChange('sentMsg', (newVal) => {\n            console.info('[uibuilder.onChange:sentMsg] msg sent to Node-RED server:', newVal);\n\n            this.setState({ 'msgSent': newVal });\n        })\n        // Updated count of sent messages\n        uibuilder.onChange('msgsSent', (newVal) => {\n            console.info('[uibuilder.onChange:msgsSent] Updated count of msgs sent:', newVal);\n\n            this.setState({ 'msgsSent': newVal });\n        })\n\n        // If we send a control message to Node-RED, we can get a copy of it here\n        uibuilder.onChange('sentCtrlMsg', (newVal) => {\n            console.info('[uibuilder.onChange:sentCtrlMsg] Control message sent to Node-RED server:', newVal);\n\n            this.setState({ 'msgCtrlSent': newVal });\n        })\n        // And we can get an updated count\n        uibuilder.onChange('msgsSentCtrl', (newVal) => {\n            console.info('[uibuilder.onChange:msgsSentCtrl] Updated count of CONTROL msgs sent:', newVal);\n\n            this.setState({ 'msgsCtrlSent': newVal });\n        })\n        //#endregion ---- End of Trace Sent Messages ---- //\n\n        // If Socket.IO connects/disconnects, we get true/false here\n        uibuilder.onChange('ioConnected', (newVal) => {\n            console.info('[uibuilder.onChange:ioConnected] Socket.IO Connection Status Changed to:', newVal)\n\n            this.setState({ 'socketConnectedState': newVal })\n        })\n        // If Server Time Offset changes\n        uibuilder.onChange('serverTimeOffset', (newVal) =>{\n            console.info('[uibuilder.onChange:serverTimeOffset] Offset of time between the browser and the server has changed to:', newVal)\n\n            this.setState({ 'serverTimeOffset': newVal })\n        })\n\n        \t//Manually send a message back to Node-RED after 2 seconds\n        \twindow.setTimeout(function(){\n        \t    console.info('Sending a message back to Node-RED-after2sdelay')\n        \t    uibuilder.send({'topic':'uibuilderfe','payload':'I am a message sent from the uibuilder front end'})\n        \t},2000)\n\t}\n\n\n\trender(){\n\t\treturn(\n\n\t\t\t<div ref=\"root\" style={{height:\"50vh\"}}>\n                <hr></hr>\n                <div className=\"d1\">\n                    <div>Last msg Received:</div>\n                    <pre><code>{JSON.stringify(this.state.msgRecvd, null, 2)}</code></pre>\n                    <div># Msgs Received: {this.state.msgsReceived}</div>\n                </div>\n\n                <div className=\"d1\">\n                    <div>last Ctl Msg Received:</div>\n                    <pre><code>{JSON.stringify(this.state.msgCtrl, null, 2)}</code></pre>\n                    <div># Control Msgs Received: {this.state.msgsControl}</div>\n                </div>\n\n                <div className=\"d1\">\n                    <div>last Msg Sent</div>\n                    <pre><code>{JSON.stringify(this.state.msgSent, null, 2)}</code></pre>\n                    <div># msgs Sent: {this.state.msgsSent}</div>\n                </div>\n\n                <div className=\"d1\">\n                    <div>Socket Connected?: {this.state.socketConnectedState}</div>\n                    <div>uibuilderfe Version: {this.state.feVersion}</div>\n                    <div>Server Time Offset from browser: {this.state.serverTimeOffset}</div>\n                </div>\n\n\t\t\t</div>\n\t\t);\n\n\t}\n\n}\n\nexport default UserData\n","import React from 'react';\nimport './App.css';\n\n// Import uibuilder enabled component\nimport UserData from './scenes/UserData';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n\n        {/* THIS IS THE UIBUILDER COMPONENT */}\n        <UserData title=\"User Data\"></UserData>\n\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}